* Cada transação realizada no sistema deve possuir SOMENTE as seguintes informações:
  1) Data da Transação (Date)
  2) Tipo de Transação (Depósito, Transferência, Pagamento de Boleto)
  3) Valor da Transação (valor maior que zero)

* Sempre que a transação for do tipo DEPÓSITO, o valor da transação deve ser adicionado ao saldo da conta.
* Sempre que a transação for do tipo TRANSFERÊNCIA ou PAGAMENTO DE BOLETO, o valor da transação deve ser subtraído do saldo da conta.
* O saldo deve sempre ser atualizado na tela da aplicação a cada transação realizada.
____________________________________________________________

* ANOTAÇÕES

- Como indicar para o Typescript que o que a gente está usando se trata de um HTML como por exemplo:

const elementoSaldo = document.querySelector('.saldo-valor .valor') as HTMLElement; // ESSAS INDICAÇÕES DE as HTMLElement

if (elementoSaldo !== null){

    elementoSaldo.textContent = saldo.toString(); // fez com que mostrasse na tela o saldo
}

____________________________________________________________

Quando mudei a extesão do arquivo de .JS para .TS ele passou a não funcionar mais, por que teve a mudança de extensão, porém não é colocando o .ts no arquivo que faz a ligação do arquivo.

Neste procedimento tem que abrir o terminal  
 - Vai abrir a pasta JS ( cd js)
 - tsc nome do arquivo com a extensão ( tsc bytebank.ts)
 ____________________________________________________________
 
 Ao invés de usar sempre o  ts + nome do arquivo para compilar o arquivo em JS , pode ser substituido por " TS -W " isso vai fazer com que ele fica monitorando os arquivos e compilando aonde quer que ele esteja e fazendo a compilação de forma automatica.
 
 ____________________________________________________________


 Tipos primitivos:

let valor: number = 3000;
let nome: string = '';
let isPago: boolean = false;
let qualquer: any = ''; // Esse Any ele uma forma de usar ele para alterar o valor da variavel informado que pode
qualquer = 22;

____________________________________________________________

// tipos personalizado  ( type alias)

type Transacao = {
    tipoTrsansacao: string;
    data: Date;
    valor: number;
}

const novaTransacao: Transacao = {
    tipoTrsansacao: "Deposito",
    data: new Date(),
    valor: 8 
}

____________________________________________________________
Aula 06

// Enum
enum tipoTransacao {
    DEPOSITO = "Depósito",
    TRANFERENCIA = "Transferência",
    PAGAMENTO_BOLETO = "Pagamento de Boleto"
}

____________________________________________________________

** Parte do Módulo

Durante esta segunda aula, exploramos os seguintes tópicos:

Conhecemos o arquivo tsconfig.json e sua função em um projeto.
Aprendemos as vantagens de trabalhar com tipos definidos.
Exploramos a criação de tipos personalizados usando Type Alias e também a criação de Arrays tipados no TypeScript.
Aprendemos o conceito e a aplicabilidade das Enums.
Com isso, estamos prontos para seguir em frente para a próxima aula!

____________________________________________________________

06 Repensando a divisão das responsabilidades

* As informações da conta devem ficar no módulo especifico " Conta "
- Saldo 
- Data de acesso
- Registro de transações
- Históricos de transações reaizadas 

( Quem precisar dessas informações chama o módulo " Conta " )

* Os Componentes
- Nova transação: Deve apenas coletas as informações do formulário da interface e repassar os dados para módulo conta
- Saldo: Deve exibir as informações de dados de acesso e de saldo para o usuário na interface, acessando esses dados atráves do módulo conta 

(Só tem a reposnsabilidade de interagir com a parte da interface)